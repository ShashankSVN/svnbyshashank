git reset --hard origin/master
will remove all commits not in origin/master where origin is the repo name and master is the name of the branch.

git branch 
should show all the local branches of your repo. The starred branch is your current branch

$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
 

git log

view commit history git 

 git revert

 
 $ git reset --hard b36055541709736d3ace7df14b9a094c415e0db2
HEAD is now at b360555 test file
 b36055541709736d3ace7df14b9a094c415e0db2
 
 # This will destroy any local modifications.
# Don't do it if you have uncommitted work you want to keep.
git reset --hard 0d1d7fc32

# Alternatively, if there's work to keep:
git stash
git reset --hard 0d1d7fc32
git stash pop
# This saves the modifications, then reapplies that patch after resetting.
# You could get merge conflicts, if you've modified things which were
# changed since the commit you reset to.

what-is-the-difference-between-git-pull-and-git-fetch
In the simplest terms, git pull does a git fetch followed by a git merge.

You can do a git fetch at any time to update your remote-tracking branches under refs/remotes/<remote>/.

This operation never changes any of your own local branches under refs/heads, and is safe to do without changing your working copy. I have even heard of people running git fetch periodically in a cron job in the background (although I wouldn't recommend doing this).

A git pull is what you would do to bring a local branch up-to-date with its remote version, while also updating your other remote-tracking branches.
  
  